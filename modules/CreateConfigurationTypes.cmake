include_guard(GLOBAL)

cmake_policy(PUSH)
cmake_policy(SET CMP0057 NEW) # if IN_LIST

include(Missives)

include(ConfigurationCheck)

# VARIABLES :
# CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>
# CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>
# CMAKE_<CONFIG>_POSTFIX
# CMAKE_EXE_LINKER_FLAGS_<CONFIG>
# CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>
# CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>
# CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>
# CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>
# CMAKE_MODULE_LINKER_FLAGS_<CONFIG>
# CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>
# CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>
# CMAKE_SHARED_LINKER_FLAGS_<CONFIG>
# CMAKE_STATIC_LINKER_FLAGS_<CONFIG>
# CMAKE_<LANG>_FLAGS_<CONFIG>

macro(add_configuration)
  set(LANGUAGE_FLAGS "ASM_FLAGS" "C_FLAGS" "CXX_FLAGS" "Fortran_FLAGS")
  if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.8")
    set(LANGUAGE_FLAGS "${LANGUAGE_FLAGS}" "CUDA_FLAGS")
  endif()
  if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.16")
    set(LANGUAGE_FLAGS "${LANGUAGE_FLAGS}" "OBJC_FLAGS" "OBJCXX_FLAGS")
  endif()
  if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.18")
    set(LANGUAGE_FLAGS "${LANGUAGE_FLAGS}" "ISPC_FLAGS")
  endif()
  if(CMAKE_VERSION VERSION_GREATER_EQUAL "3.21")
    set(LANGUAGE_FLAGS "${LANGUAGE_FLAGS}" "HIP_FLAGS")
  endif()
  set(options VERBOSE)
  set(oneValueArgs
          CONFIG
          BASE_CONFIG
          ARCHIVE_OUTPUT_DIRECTORY
          COMPILE_PDB_OUTPUT_DIRECTORY
          POSTFIX
          FRAMEWORK_MULTI_CONFIG_POSTFIX
          INTERPROCEDURAL_OPTIMIZATION
          LIBRARY_OUTPUT_DIRECTORY
          MAP_IMPORTED_CONFIG
          PDB_OUTPUT_DIRECTORY
          RUNTIME_OUTPUT_DIRECTORY
          )
  set(multiValueArgs
          EXE_LINKER_FLAGS
          MODULE_LINKER_FLAGS
          SHARED_LINKER_FLAGS
          STATIC_LINKER_FLAGS
          ${LANGUAGE_FLAGS}
          )
  cmake_parse_arguments(ARG "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  if(NOT DEFINED ARG_CONFIG)
    missive(FATAL_ERROR "CONFIG variable is mandatory")
  endif()
  if(NOT DEFINED ARG_VERBOSE)
    set(ARG_VERBOSE FALSE)
  endif()
  list(APPEND ALLOWABLE_BUILD_TYPES ${ALLOWABLE_BUILD_TYPES} ${ARG_CONFIG})
  list(REMOVE_DUPLICATES ALLOWABLE_BUILD_TYPES)

  get_property(GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
  if(GENERATOR_IS_MULTI_CONFIG)
    if(NOT ${ARG_CONFIG} IN_LIST CMAKE_CONFIGURATION_TYPES)
      list(APPEND CMAKE_CONFIGURATION_TYPES ${ARG_CONFIG})
    endif()
  else()
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "${ALLOWABLE_BUILD_TYPES}")
  endif()


  set(ALLOWABLE_BUILD_TYPES_UPPER ${ALLOWABLE_BUILD_TYPES})
  list(TRANSFORM ALLOWABLE_BUILD_TYPES_UPPER TOUPPER)
  if(NOT ARG_BASE_CONFIG)

  elseif(NOT ARG_BASE_CONFIG_UPPER IN_LIST ALLOWABLE_BUILD_TYPES_UPPER)
    string(TOUPPER ${ARG_BASE_CONFIG} ARG_BASE_CONFIG_UPPER)
    list(APPEND ALLOWABLE_BUILD_TYPES_DUMB ${ALLOWABLE_BUILD_TYPES})
    list(JOIN ALLOWABLE_BUILD_TYPES_DUMB ", " STRING_ALLOWABLE_BUILD_TYPES_DUMB)
    missive(FATAL_ERROR "Invalid BASE_CONFIG : ${ARG_BASE_CONFIG}\nBASE_CONFIG should be on the list : ${STRING_ALLOWABLE_BUILD_TYPES_DUMB}")
  endif()
  string(TOUPPER ${ARG_CONFIG} ARG_CONFIG)

  #First BASE_CONFIG exists initialize the CONFIG this it
  #Then if the VARIABLE is set for CONFIG append them
  set(ALL_CONFIGS_OPTIONS
          ARCHIVE_OUTPUT_DIRECTORY
          COMPILE_PDB_OUTPUT_DIRECTORY
          EXE_LINKER_FLAGS
          FRAMEWORK_MULTI_CONFIG_POSTFIX
          INTERPROCEDURAL_OPTIMIZATION
          LIBRARY_OUTPUT_DIRECTORY
          MAP_IMPORTED_CONFIG
          MODULE_LINKER_FLAGS
          PDB_OUTPUT_DIRECTORY
          RUNTIME_OUTPUT_DIRECTORY
          SHARED_LINKER_FLAGS
          STATIC_LINKER_FLAGS
          ${LANGUAGE_FLAGS}
          )

  foreach(OPTIONS IN LISTS ALL_CONFIGS_OPTIONS)
    if(DEFINED ARG_BASE_CONFIG AND DEFINED ARG_${OPTIONS})
      list(LENGTH CMAKE_${OPTIONS}_${ARG_BASE_CONFIG_UPPER} SIZE)
      if(SIZE GREATER 0)
        set(CMAKE_${OPTIONS}_${ARG_CONFIG} "${CMAKE_${OPTIONS}_${ARG_BASE_CONFIG_UPPER}};${ARG_${OPTIONS}}")
      else()
        set(CMAKE_${OPTIONS}_${ARG_CONFIG} "${ARG_${OPTIONS}}")
      endif()
    else()
      set(CMAKE_${OPTIONS}_${ARG_CONFIG} "${ARG_${OPTIONS}}")
    endif()
  endforeach()

  ## Special case for   CMAKE_<CONFIG>_POSTFIX
  if(DEFINED ARG_BASE_CONFIG AND DEFINED ARG_POSTFIX)
    list(LENGTH CMAKE_${ARG_BASE_CONFIG_UPPER}_POSTFIX SIZE)
    if(SIZE GREATER 0)
      set(CMAKE_${ARG_CONFIG}_POSTFIX "${CMAKE_${ARG_CONFIG}_POSTFIX};${ARG_POSTFIX}")
    else()
      set(CMAKE_${ARG_CONFIG}_POSTFIX "${ARG_POSTFIX}")
    endif()
  else()
    set(CMAKE_${ARG_CONFIG}_POSTFIX "${ARG_POSTFIX}")
  endif()

  if(ARG_VERBOSE)
    print_configuration(${ARG_CONFIG})
  endif()
endmacro()

cmake_policy(POP)
